# -*- coding: utf-8 -*-
# ***************************************************************************
# *   Copyright (c) 2021 Russell Johnson (russ4262) <russ4262@gmail.com>    *
# *                                                                         *
# *   This program is free software; you can redistribute it and/or modify  *
# *   it under the terms of the GNU Lesser General Public License (LGPL)    *
# *   as published by the Free Software Foundation; either version 2 of     *
# *   the License, or (at your option) any later version.                   *
# *   for detail see the LICENCE text file.                                 *
# *                                                                         *
# *   This program is distributed in the hope that it will be useful,       *
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
# *   GNU Library General Public License for more details.                  *
# *                                                                         *
# *   You should have received a copy of the GNU Library General Public     *
# *   License along with this program; if not, write to the Free Software   *
# *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
# *   USA                                                                   *
# *                                                                         *
# ***************************************************************************

import FreeCAD
import Part
import Path.Geom as PathGeom
import Path.Log as PathLog
import time
import Macro_CombineRegions
import Gui_Input
import Tool_Controller
import Generator_Utilities as GenUtils

__title__ = "Path Clearing Generator Utilities"
__author__ = "russ4262 (Russell Johnson)"
__url__ = ""
__doc__ = "Macro to test multiple pattern generators using 2D and 3D."

if False:
    PathLog.setLevel(PathLog.Level.DEBUG, PathLog.thisModule())
    PathLog.trackModule(PathLog.thisModule())
else:
    PathLog.setLevel(PathLog.Level.INFO, PathLog.thisModule())

isDebug = True if PathLog.getLevel(PathLog.thisModule()) == 4 else False
showDebugShapes = False


MODULE_NAME = "Macro_DropCut_3D"
OPTIMIZE = False
moveCnt = 0

if isDebug:
    GenUtils.isDebug = True

# Project 2D wires onto 3D face(s)
def getProjectedGeometry(face, pathGeomList):
    """getProjectedGeometry(face, pathGeomList) Return list of wires resulting from projection onto face"""
    faceCopy = face.copy()
    # print(f"   paths: {paths}")
    compPathGeom = Part.makeCompound(pathGeomList)
    # Debug
    # Part.show(compPathGeom, "PathGeom")  #  path projected to original face
    faceCopy.translate(
        FreeCAD.Vector(
            0.0, 0.0, (compPathGeom.BoundBox.ZMin - 10.0) - faceCopy.BoundBox.ZMin
        )
    )
    transDiff = face.BoundBox.ZMin - faceCopy.BoundBox.ZMin
    projWires = []
    for w in pathGeomList:
        p = faceCopy.makeParallelProjection(w, FreeCAD.Vector(0.0, 0.0, -1.0))
        p.translate(FreeCAD.Vector(0.0, 0.0, transDiff))
        wire = Part.Wire(Part.__sortEdges__(p.Edges))  # sort edges properly
        projWires.append(wire)

    return projWires


def toolShapeCenter(toolShape):
    tBB = toolShape.BoundBox
    return FreeCAD.Vector(
        round(tBB.Center.x, 7), round(tBB.Center.y, 7), round(tBB.ZMin, 7)
    )


def _bspline(__, sampleInterval, cnt, edgeLen):
    # print(".. _bspline")
    return (sampleInterval * cnt) / edgeLen


def _arc(e, sampleInterval, cnt, edgeLen):
    # print(".. _arc")
    rate = (sampleInterval * cnt) / edgeLen
    return e.FirstParameter + rate * (e.LastParameter - e.FirstParameter)


def _ellipse(e, sampleInterval, cnt, edgeLen):
    # print(".. _ellipse")
    rate = (sampleInterval * cnt) / edgeLen
    return e.FirstParameter + rate * (e.LastParameter - e.FirstParameter)


def _line(e, sampleInterval, cnt, __):
    # print(".. _line")
    return e.FirstParameter + (sampleInterval * cnt)


def _getValueAtArgument(typeId):
    if typeId == "Part::GeomBSplineCurve":
        return _bspline
    elif typeId == "Part::GeomCircle":
        return _arc
    elif typeId == "Part::GeomLine":
        return _line
    elif typeId == "Part::GeomEllipse":
        return _ellipse

    GenUtils._debugMsg(
        MODULE_NAME, f"followEdge() e.Curve.TypeId, {typeId}, is not available."
    )
    return None


def dropShapeToFace(toolShape, face, tolerance):
    """dropShapeToFace(toolShape, face, tolerance)...
    Drops(moves) a toolShape to the face until distance thereto is less than or equal to tolerance specified.
    Loop limited to hard-coded 20 drops, with no science behind the number 20."""
    drops = 0
    distToShape = toolShape.distToShape(face)
    dist = distToShape[0]
    # print(f"start distance to face: {dist}")
    while dist > tolerance:
        drops += 1
        trans = FreeCAD.Vector(0.0, 0.0, dist / -1.5)
        toolShape.translate(trans)
        distToShape = toolShape.distToShape(face)
        dist = distToShape[0]
        # print(f"distToShape: {distToShape}")
        if drops > 5:
            break
    # print(f"end distance to face: {dist}")
    return drops


def moveToolShape(location, nxt, startDepth, toolShape):
    deltaX = nxt.x - location.x
    deltaY = nxt.y - location.y
    deltaZ = startDepth - location.z
    trans = FreeCAD.Vector(deltaX, deltaY, deltaZ)
    toolShape.translate(trans)
    return toolShape


def followEdge(e, toolShape, face, startDepth, sampleInterval, tolerance, lastEdge):
    global moveCnt

    points = []
    tool = toolShape
    eLen = e.Length
    edgeLen = e.Length
    dropCnt = 0
    moveCnt += 1
    loopCnt = 0

    typeId = e.Curve.TypeId
    valueFunction = _getValueAtArgument(typeId)

    # follow edge
    while eLen > sampleInterval:
        moveCnt += 1
        # move to next point along edge
        valueAtParam = valueFunction(e, sampleInterval, loopCnt, edgeLen)
        nxt = e.valueAt(valueAtParam)
        location = toolShapeCenter(tool)
        tool = moveToolShape(
            location,
            nxt,
            startDepth,
            tool,
        )
        dropCnt += dropShapeToFace(tool, face, tolerance)
        center = toolShapeCenter(tool)
        if center.z < nxt.z:
            center.z = nxt.z
        points.append(center)
        eLen -= sampleInterval
        loopCnt += 1

    if loopCnt == 0 or lastEdge:
        # experimental section for edges of length less than sampleInterval
        nxt = e.valueAt(e.LastParameter)
        location = toolShapeCenter(tool)
        tool = moveToolShape(location, nxt, startDepth, tool)
        dropCnt += dropShapeToFace(tool, face, tolerance)
        center = toolShapeCenter(tool)
        if center.z < nxt.z:
            center.z = nxt.z
        points.append(center)

    return points, dropCnt


def _dropCutEdges(edges, toolShape, faceShape, startDepth, sampleInterval, tolerance):
    wirePoints = []
    dropCnt = 0
    distance = 0.0
    for e in edges[:-1]:
        if distance + e.Length > sampleInterval:
            distance = 0.0
            points, drpCnt = followEdge(
                e,
                toolShape,
                faceShape,
                startDepth,
                sampleInterval,
                tolerance,
                False,
            )
            wirePoints.extend(points)
            dropCnt += drpCnt
        else:
            distance += e.Length

    # Process last edge
    e = edges[-1]
    points, drpCnt = followEdge(
        e, toolShape, faceShape, startDepth, sampleInterval, tolerance, True
    )
    wirePoints.extend(points)
    dropCnt += drpCnt

    return wirePoints, dropCnt


def getToolShape(toolController):
    """getToolShape(toolController) Return tool shape with shank removed."""
    full = toolController.Tool.Shape.copy()
    vertEdges = [
        e
        for e in full.Edges
        if len(e.Vertexes) == 2
        and PathGeom.isRoughly(e.Vertexes[0].X, e.Vertexes[1].X)
        and PathGeom.isRoughly(e.Vertexes[0].Y, e.Vertexes[1].Y)
    ]
    vertEdges.sort(key=lambda e: e.BoundBox.ZMax)
    topVertEdge = vertEdges.pop()
    top = full.BoundBox.ZMax + 2.0
    face = PathGeom.makeBoundBoxFace(full.BoundBox, 5.0, top)
    dist = -1.0 * (top - topVertEdge.BoundBox.ZMin)
    faceExt = face.extrude(FreeCAD.Vector(0.0, 0.0, dist))
    # Part.show(full, "Full")
    # Part.show(faceExt, "FaceExt")
    return full.cut(faceExt)


def _dropCutWires(pathWires, faceShape, toolController, sampleInterval, tolerance):
    pointsLists = []
    dropCnt = 0
    startDepth = faceShape.BoundBox.ZMax
    # print(
    #    f"_dropCutWires({toolController.Name}, si{sampleInterval}, t{tolerance}) startDep{startDepth}"
    # )
    if OPTIMIZE:
        import PathScripts.PathUtils as PathUtils

    wCnt = 0
    for w in pathWires:
        wCnt += 1
        # Part.show(w, f"Wire_{wCnt}")
        toolShape = getToolShape(toolController)
        if w.Length > sampleInterval:
            # Cut regular, longer wires longer than sample interval
            interval = sampleInterval
        else:
            # Make sure wires less than sample interval are cut
            interval = w.Length * 0.90
        (wirePoints, drpCnt) = _dropCutEdges(
            w.Edges, toolShape, faceShape, startDepth, interval, tolerance
        )
        dropCnt += drpCnt
        # Optimize points list
        if len(wirePoints) > 0:
            if OPTIMIZE:
                pointsLists.append(
                    PathUtils.simplify3dLine(
                        wirePoints, GenUtils.LINEARDEFLECTION.Value
                    )
                )
            else:
                pointsLists.append(wirePoints)
        else:
            GenUtils._debugMsg(MODULE_NAME, f"no drop cut wire points from wire {wCnt}")

    # Part.show(toolShape, "ToolShape")
    GenUtils._debugMsg(MODULE_NAME, f"Drop count: {dropCnt}")

    return pointsLists


def pointsToLines(pointsLists, depthOffset=0.0):
    wires = []
    if depthOffset == 0.0:
        for pnts in pointsLists:
            if len(pnts) > 1:
                lines = []
                p0 = pnts[0]
                for p in pnts[1:]:
                    if p0.sub(p).Length > 0.000001:
                        lines.append(Part.makeLine(p0, p))
                        p0 = p
                if len(lines) > 0:
                    wires.append(Part.Wire(lines))
    else:
        trans = FreeCAD.Vector(0.0, 0.0, depthOffset)
        for pnts in pointsLists:
            if len(pnts) > 1:
                lines = []
                p0 = pnts[0]
                for p in pnts[1:]:
                    if p0.sub(p).Length > 0.000001:
                        line = Part.makeLine(p0, p)
                        line.translate(trans)
                        lines.append(line)
                        p0 = p
                if len(lines) > 0:
                    wires.append(Part.Wire(lines))

    return wires


def _getGeneratorModule(cutPattern):
    module = None
    if cutPattern == "Adaptive":
        import Generator_Adaptive as module
    elif cutPattern == "Line":
        import Generator_Line as module
    elif cutPattern == "Circle":
        import Generator_Circle as module
    elif cutPattern == "CircleZigZag":
        import Generator_CircleZigZag as module
    elif cutPattern == "ZigZag":
        import Generator_ZigZag as module
    elif cutPattern == "Offset":
        import Generator_Offset as module
    elif cutPattern == "Profile":
        import Generator_Profile as module
    elif cutPattern == "Spiral":
        import Generator_Spiral as module
    else:
        FreeCAD.Console.PrintError(
            f"Did not find selected cut pattern, {cutPattern}.\n"
        )

    return module


def _setCutSpeeds(module, toolController):
    module.FEED_VERT = toolController.VertFeed.Value
    module.FEED_HORIZ = toolController.HorizFeed.Value
    module.RAPID_VERT = toolController.VertRapid.Value
    module.RAPID_HORIZ = toolController.HorizRapid.Value


def execute(
    faces,
    toolController,
    job,
    pathType,
    cutPattern,
    cutDirection,
    stepOver,
    patternAngle,
    cutPatternCenterAt,
    cutPatternCenterCustom,
    reverseCutPattern,
    sampleInterval,
    dropTolerance=0.1,
    finalDepth=None,
    depthOffset=0.0,
):

    generatorModule = _getGeneratorModule(cutPattern)
    if generatorModule is None:
        return [], []

    if len(faces) == 0:
        GenUtils._debugMsg(MODULE_NAME, "No faces for target region(s).")
        return [], []

    # combine faces into horizontal regions
    region = Macro_CombineRegions.combineRegions(
        faces, saveExistingHoles=True, saveMergedHoles=True
    )
    # Part.show(region, "Region")

    # fuse faces together for projection of path geometry
    if len(faces) == 1:
        faceShape = faces[0]
    else:
        faceShape = faces[0]
        for f in faces:
            fused = faceShape.fuse(f)
            faceShape = fused

    # Process faces for path geometry
    toolDiameter = (
        toolController.Tool.Diameter.Value
        if hasattr(toolController.Tool.Diameter, "Value")
        else float(toolController.Tool.Diameter)
    )
    toolRadius = toolDiameter / 2.0

    # print(f"Tool radius: {toolRadius},  Step-over: {stepOver}")

    # Set cut speeds from tool controller
    _setCutSpeeds(generatorModule, toolController)

    if cutPattern == "Adaptive":
        fBB = faceShape.BoundBox
        generatorModule.setAdaptiveAttributes(
            useHelixEntry=False,
            materialAllowance=0.0,
            operationType="Clearing",
            cutSide="Inside",
            forceInsideOut=True,
            liftDistance=5.0,
            finishingProfile=False,
            helixAngle=5.0,
            helixConeAngle=0.0,
            useHelixArcs=False,
            helixDiameterLimit=toolRadius * 1.9,
            keepToolDownRatio=2.0,
            adaptiveTolerance=0.1,
            clearanceHeight=fBB.ZMax + 10.0,
            safeHeight=fBB.ZMax + 5.0,
            startDepth=fBB.ZMax + 1.0,
            stockObj=job.Stock,
        )

    pathGeomList = generatorModule.generatePathGeometry(
        region,
        toolRadius,
        stepOver,
        cutDirection,
        patternCenterAt=cutPatternCenterAt,
        patternCenterCustom=cutPatternCenterCustom,
        cutPatternAngle=patternAngle,
        cutPatternReversed=reverseCutPattern,
        minTravel=False,
        keepToolDown=False,
        jobTolerance=0.01,
    )

    # Debugging - show 2D path wires
    # Part.show(Part.makeCompound(pathGeomList), "rawPathGeomList")

    compFaces = Part.makeCompound(faces)
    retractHeight = compFaces.BoundBox.ZMax + 5.0

    keepToolDown = False
    keepToolDownThreshold = 5.0
    startPoint = None

    if pathType == "3D":
        GenUtils._debugMsg(MODULE_NAME, "building 3D path")
        # Project path geometry onto origninal faces
        projectionWires = getProjectedGeometry(faceShape, pathGeomList)
        projWires = generatorModule._Link_Projected(
            projectionWires, cutDirection, cutReversed=False
        )
        # Part.show(Part.makeCompound(projWires), "ProjWires") # Debug
        # Apply drop cut to 3D projected wires to get point set
        pointsLists = _dropCutWires(
            projWires, faceShape, toolController, sampleInterval, dropTolerance
        )

        lines = pointsToLines(pointsLists, depthOffset)
        if cutPattern == "Adaptive":
            paths = generatorModule.geometryToGcode3D(lines, retractHeight, finalDepth)
        else:
            # paths = generatorModule.geometryToGcode(
            #    lines, toolController, retractHeight, finalDepth
            # )
            paths = generatorModule.geometryToGcode(
                lines,
                retractHeight,
                finalDepth,
                keepToolDown,
                keepToolDownThreshold,
                startPoint,
                toolRadius,
            )
    else:
        GenUtils._debugMsg(MODULE_NAME, "making 2D path")
        if finalDepth is None:
            finalDepth = compFaces.BoundBox.ZMax

        lines = pathGeomList
        # paths = generatorModule.geometryToGcode(lines, toolController, retractHeight, finalDepth)
        paths = generatorModule.geometryToGcode(
            lines,
            retractHeight,
            finalDepth,
            keepToolDown,
            keepToolDownThreshold,
            startPoint,
            toolRadius,
        )

    return paths, lines


# Auxillary functions
def getFacesFromSelection():
    if not FreeCAD.GuiUp:
        return []

    import FreeCADGui

    faces = []
    selection = FreeCADGui.Selection.getSelectionEx()
    # process user selection
    for sel in selection:
        # print(f"Object.Name: {sel.Object.Name}")
        for feat in sel.SubElementNames:
            # print(f"Processing: {sel.Object.Name}::{feat}")
            if feat.startswith("Face"):
                # face = sel.Object.Shape.getElement(feat)
                faces.append(sel.Object.Shape.getElement(feat))

    return faces


def getUserInput():

    # Get path type from user
    guiInput = Gui_Input.GuiInput()
    guiInput.setWindowTitle("Path Details")
    guiInput.addComboBox("Cut Pattern", GenUtils.PATTERNS)
    guiInput.addComboBox("Path Type", GenUtils.PATHTYPES)
    guiInput.addDoubleSpinBox("Step over %", 100.0)
    guiInput.getInputByIndex(2).setMaximum(100.0)
    guiInput.getInputByIndex(2).setMinimum(0.0)
    guiInput.getInputByIndex(2).setValue(75.0)
    guiInput.addComboBox("Cut Direction", GenUtils.CUTDIRECTIONS)
    guiInput.addDoubleSpinBox("Cut Pattern Angle", 0.0)
    guiInput.getInputByIndex(4).setMaximum(360.0)
    guiInput.getInputByIndex(4).setMinimum(0.0)
    guiInput.addComboBox("Cut Pattern Center At", GenUtils.PATTERNCENTERS)
    x, y, z = guiInput.addDoubleVector(
        "Pattern Center Custom", FreeCAD.Vector(0.0, 0.0, 0.0)
    )
    x.setMaximum(999999999.9)
    x.setMinimum(-999999999.9)
    y.setMaximum(999999999.9)
    y.setMinimum(-999999999.9)
    z.setMaximum(999999999.9)
    z.setMinimum(-999999999.9)
    guiInput.addDoubleSpinBox("Sample interval", 1.0)
    guiInput.addCheckBox("Reverse Cut Pattern")
    guiInput.addCheckBox("Optimize paths")
    guiInput.addCheckBox("Test All Patterns")
    guiInput.getInputByIndex(9).setValue(True)
    return guiInput.execute()


def runMacro():
    global OPTIMIZE

    targetFaces = getFacesFromSelection()
    if len(targetFaces) == 0:
        return

    values = getUserInput()
    if not values:
        return
    (
        cutPattern,
        pathType,
        stepOver,
        cutDirection,
        patternAngle,
        patternCenterAt,
        patternCenterCustom,
        sampleInterval,
        reverseCutPattern,
        optimize,
        testAll,
    ) = values
    OPTIMIZE = optimize

    if testAll:
        testAllCutPatterns(
            pathType,
            stepOver,
            cutDirection,
            patternAngle,
            patternCenterAt,
            patternCenterCustom,
            sampleInterval,
            reverseCutPattern,
        )
        return

    timeStart = time.time()
    GenUtils._debugMsg(MODULE_NAME, f"Pattern: {cutPattern}")

    # Set tool controller from Job object
    tc, jb = Tool_Controller.getToolController()
    job = None
    op = None
    for obj in FreeCAD.ActiveDocument.Objects:
        if obj.Name == "Job":
            job = obj
            break
    if job:
        import Path.Op.Gui.Custom as PathCustomGui

        op = PathCustomGui.PathCustom.Create("Custom")
        op.ToolController = tc
        op.ViewObject.Proxy = PathCustomGui.PathOpGui.ViewProvider(
            op.ViewObject, PathCustomGui.Command.res
        )
        op.ViewObject.Proxy.deleteOnReject = False
        # op.recompute()
        op.Label = cutPattern + "_" + pathType
        FreeCAD.ActiveDocument.recompute()
    else:
        FreeCAD.Console.PrintError("No Job object to receive paths.\n")
        return

    tolerance = 0.1
    paths, pathGeom = execute(
        targetFaces,
        tc,
        job,
        pathType,
        cutPattern,
        cutDirection,
        stepOver,
        patternAngle,
        patternCenterAt,
        patternCenterCustom,
        reverseCutPattern,
        sampleInterval,
        tolerance,
    )

    if len(paths) == 0:
        GenUtils._debugMsg(MODULE_NAME, "No path data recieved for Custom object.")
        workTime = time.time() - timeStart
        GenUtils._debugMsg(MODULE_NAME, f"Processing time: {workTime}")
        return

    if job:
        if isinstance(paths, list):
            op.Gcode = ["G90"] + [c.toGCode() for c in paths]
        else:
            op.Gcode = ["G90"] + [c.toGCode() for c in paths.Commands]
        FreeCAD.ActiveDocument.recompute()

    workTime = time.time() - timeStart
    GenUtils._debugMsg(MODULE_NAME, f"Processing time: {workTime}")


def testAllCutPatterns(
    pathType,
    stepOver,
    cutDirection,
    patternAngle,
    patternCenterAt,
    patternCenterCustom,
    sampleInterval,
    reverseCutPattern,
):
    vertOffset = 0.0

    """# Get path type from user
    guiInput = Gui_Input.GuiInput()
    guiInput.setWindowTitle("Select Path Type")
    guiInput.addComboBox("Path Type", GenUtils.PATHTYPES)
    values = guiInput.execute()
    if not values:
        FreeCAD.Console.PrintError("No user values returned.\n")
        return

    pathType = values[0]"""

    timeStart = time.time()
    targetFaces = getFacesFromSelection()
    # Set tool controller from Job object
    tc, jb = Tool_Controller.getToolController()
    if jb:
        job = jb
    else:
        job = None
        for obj in FreeCAD.ActiveDocument.Objects:
            if obj.Name == "Job":
                job = obj
                break

    if job:
        import Path.Op.Gui.Custom as PathCustomGui

    # for pat in ["Circle", "CircleZigZag"]:
    for trans, pat in GenUtils.PATTERNS:
        GenUtils._debugMsg(MODULE_NAME, f"Pattern and Path Type: {pat}, {pathType}")
        op = None
        if job:
            op = PathCustomGui.PathCustom.Create("Custom")
            op.ViewObject.Proxy = PathCustomGui.PathOpGui.ViewProvider(
                op.ViewObject, PathCustomGui.Command.res
            )
            op.ViewObject.Proxy.deleteOnReject = False
            op.ToolController = tc
            op.Label = pat + "_" + pathType
            # FreeCAD.ActiveDocument.recompute()
            # time.sleep(1)
        # sampleInterval = 1.0
        tolerance = 0.5
        # stepOver = 100.0
        paths, pathGeom = execute(
            targetFaces,
            tc,
            job,
            pathType,
            pat,
            cutDirection,
            stepOver,
            patternAngle,
            patternCenterAt,
            patternCenterCustom,
            reverseCutPattern,
            sampleInterval,
            tolerance,
            depthOffset=vertOffset,
        )
        if job and len(paths) > 0:
            if isinstance(paths, list):
                op.Gcode = ["G90"] + [c.toGCode() for c in paths]
            else:
                op.Gcode = ["G90"] + [c.toGCode() for c in paths.Commands]
            FreeCAD.ActiveDocument.recompute()
            # time.sleep(1)

    workTime = time.time() - timeStart
    GenUtils._debugMsg(MODULE_NAME, f"Processing time: {workTime}")


print("\n\n\n\n")
print("Macro_DropCut3D::  Begin tool-specific path generation development macro")

runMacro()
